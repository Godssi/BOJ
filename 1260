from collections import deque  # bfs 를 위한 queue 자료구조
n, m, v = map(int, input().split())  # n 정점의 개수, m 간선의 개수, v 시작할 정점의 번호

graph = []  # graph 자료구조 이용, 0번째 index list 사용 x
for i in range(n+1):
    graph.append([])


# 간선의 정보 입력
for i in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

# 간선 정렬 필요
for i in range(1, n+1):
    graph[i].sort()


def dfs(graph, v, visited):  # dfs 알고리즘 : 깊이 우선 탐색 알고리즘
    # 방문한 노드 방문 처리
    visited[v] = True
    print(v, end=' ')

    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)


def bfs(graph, start, visited):  # bfs 알고리즘 : 너비 우선 탐색 알고리즘
    queue = deque([start])
    visited[start] = True

    while queue:
        v = queue.popleft()
        print(v, end=' ')

        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True


visited_dfs = [False] * (n+1) # 각 노드가 방문된 정보를 리스트 자료형으로 표현
visited_bfs = [False] * (n+1)

dfs(graph, v, visited_dfs)
print()
bfs(graph, v, visited_bfs)
